<svg xmlns="http://www.w3.org/2000/svg" width="245" height="200" fill="none" xmlns:v="https://vecta.io/nano"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><path d="M92.292 112.052c.869-15.502 8.448-29.2 19.931-38.878 11.237-9.515 26.329-15.338 42.897-15.338 16.487 0 31.579 5.815 42.815 15.338 11.483 9.679 19.029 23.376 19.932 38.878.869 15.912-5.537 30.758-16.733 41.749-11.483 11.155-27.723 18.209-46.014 18.209s-34.613-7.005-46.014-18.209c-11.237-10.991-17.635-25.755-16.732-41.667l-.082-.082z" fill="#fff"/><path d="M126.657 110.153c.447-7.966 4.342-15.005 10.243-19.979 5.774-4.889 13.53-7.882 22.044-7.882 8.472 0 16.228 2.988 22.002 7.882 5.901 4.974 9.779 12.013 10.243 19.979.447 8.177-2.845 15.807-8.599 21.455-5.901 5.732-14.247 9.357-23.646 9.357s-17.787-3.6-23.646-9.357c-5.775-5.648-9.062-13.235-8.599-21.412l-.042-.043z" fill="#265787"/><path d="M76.077 127.013c.055 3.12 1.049 9.189 2.542 13.91 3.136 10.032 8.472 19.305 15.848 27.44 7.587 8.387 16.944 15.132 27.735 19.937 11.338 5.015 23.646 7.587 36.417 7.587 12.772-.017 25.08-2.631 36.418-7.714 10.79-4.847 20.148-11.591 27.735-20.021 7.418-8.219 12.729-17.492 15.848-27.524 1.581-5.058 2.58-10.2 2.98-15.343.392-5.058.228-10.158-.493-15.258-1.408-9.905-4.847-19.22-10.116-27.65-4.805-7.798-11.043-14.584-18.462-20.316l.017-.013-74.605-57.324c-.068-.051-.123-.105-.194-.152-4.89-3.76-13.151-3.747-18.504.021-5.437 3.81-6.07 10.116-1.222 14.078l-.021.021 31.148 25.332-94.837.101h-.126c-7.84.008-15.385 5.142-16.86 11.676-1.534 6.618 3.793 12.139 11.971 12.139l-.013.03 48.051-.093-85.986 65.754-.329.244c-8.093 6.196-10.706 16.523-5.606 23.014 5.184 6.618 16.186 6.66 24.363.038l46.786-38.356s-.683 5.184-.628 8.261l.143.181zm120.549 17.324c-9.652 9.821-23.182 15.427-37.766 15.427-14.626.025-28.156-5.479-37.809-15.3-4.721-4.805-8.177-10.285-10.327-16.144-2.094-5.774-2.908-11.886-2.368-18.04.51-6.028 2.305-11.802 5.184-16.987 2.816-5.1 6.702-9.737 11.465-13.657 9.399-7.629 21.328-11.802 33.804-11.802 12.519-.017 24.447 4.084 33.847 11.718 4.763 3.895 8.64 8.514 11.464 13.615 2.879 5.185 4.679 10.917 5.185 16.986a42.1 42.1 0 0 1-2.377 18.041c-2.142 5.901-5.606 11.38-10.327 16.185l.025-.042z" fill="#ea7600"/></svg>